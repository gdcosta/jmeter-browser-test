<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">${__P(url,http://18.224.107.147)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
        <boolProp name="WebDriverConfig.acceptinsecurecerts">false</boolProp>
        <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
        <stringProp name="WebDriverConfig.driver_path">/home/gdcosta/workshop/jmeter/apache-jmeter-5.5/bin/chromedriver</stringProp>
        <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
        <boolProp name="WebDriverConfig.headless">true</boolProp>
        <boolProp name="WebDriverConfig.maximize_browser">false</boolProp>
        <stringProp name="ChromeDriverConfig.additional_args">--window-size=1920,1080</stringProp>
        <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
        <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
        <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
        <stringProp name="WebDriverConfig.http_host"></stringProp>
        <intProp name="WebDriverConfig.http_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
        <stringProp name="WebDriverConfig.https_host"></stringProp>
        <intProp name="WebDriverConfig.https_port">8080</intProp>
        <stringProp name="WebDriverConfig.ftp_host"></stringProp>
        <intProp name="WebDriverConfig.ftp_port">8080</intProp>
        <stringProp name="WebDriverConfig.socks_host"></stringProp>
        <intProp name="WebDriverConfig.socks_port">8080</intProp>
        <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
        <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
      </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(users,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${_P(rampup_period,1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

WDS.sampleResult.sampleStart()

// launch Chrome browser and wait to allow RUM javascript to execute.
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;);
Thread.sleep(3000);

// **************************************
// PetClinic Owner #1: George Franklin
// Find the first owner in the PetClinic, edit that user by modifying their telephone number.
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/find&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners?lastName=&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/1&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/1/edit&quot;);

WebElement telephone01 = WDS.browser.findElement(By.id(&quot;telephone&quot;));
WebElement update_owner01 = WDS.browser.findElement(By.cssSelector(&quot;.btn.btn-primary&quot;));

telephone01.clear();
telephone01.sendKeys(&quot;6085559999&quot;)
Thread.sleep(2000);
update_owner01.click();
Thread.sleep(2000);

// For that owner, modify their pet by changing their name.
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/1/pets/1/edit&quot;);

WebElement petname01 = WDS.browser.findElement(By.id(&quot;name&quot;));
WebElement update_pet01 = WDS.browser.findElement(By.cssSelector(&quot;.btn.btn-primary&quot;));

petname01.clear();
petname01.sendKeys(&quot;sammy&quot;)
Thread.sleep(2000);
update_pet01.click();
Thread.sleep(2000);

// Create an PetClinic Error
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/oups&quot;);
Thread.sleep(2000);
// **************************************

// **************************************
// PetClinic Owner #2: Betty Davis
// Find the second owner in the PetClinic, edit that user by modifying their telephone number.
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/find&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners?lastName=&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/2&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/2/edit&quot;);

WebElement telephone02 = WDS.browser.findElement(By.id(&quot;telephone&quot;));
WebElement update_owner02 = WDS.browser.findElement(By.cssSelector(&quot;.btn.btn-primary&quot;));

telephone02.clear();
telephone02.sendKeys(&quot;4445559999&quot;)
Thread.sleep(2000);
update_owner02.click();
Thread.sleep(2000);

// For that owner, modify their pet by changing their name.
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/2/pets/2/edit&quot;);

WebElement petname02 = WDS.browser.findElement(By.id(&quot;name&quot;));
WebElement update_pet02 = WDS.browser.findElement(By.cssSelector(&quot;.btn.btn-primary&quot;));

petname02.clear();
petname02.sendKeys(&quot;cecil&quot;)
Thread.sleep(2000);
update_pet02.click();
Thread.sleep(2000);

// Create an PetClinic Error
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/oups&quot;);
Thread.sleep(2000);
// **************************************

// **************************************
// PetClinic Owner #3: Eduardo Rodriquez
// Find the third owner in the PetClinic, edit that user by modifying their telephone number.
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/find&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners?lastName=&quot;);
Thread.sleep(2000);

// Create an error by entering the malformed URL x 2
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/?lastName=&quot;);
Thread.sleep(2000);
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/?lastName=&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/3&quot;);
Thread.sleep(2000);

WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/3/edit&quot;);

WebElement telephone03 = WDS.browser.findElement(By.id(&quot;telephone&quot;));
WebElement update_owner03 = WDS.browser.findElement(By.cssSelector(&quot;.btn.btn-primary&quot;));

telephone03.clear();
telephone03.sendKeys(&quot;8885559999&quot;)
Thread.sleep(2000);
update_owner03.click();
Thread.sleep(2000);

// For that owner, modify their pet by changing their name.
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/owners/3/pets/4/edit&quot;);

WebElement petname03 = WDS.browser.findElement(By.id(&quot;name&quot;));
WebElement update_pet03 = WDS.browser.findElement(By.cssSelector(&quot;.btn.btn-primary&quot;));

petname03.clear();
petname03.sendKeys(&quot;britney&quot;)
Thread.sleep(2000);
update_pet03.click();
Thread.sleep(2000);

// Create an PetClinic Error
WDS.browser.get(&quot;${url}&quot;+&quot;:&quot;+&quot;${port}&quot;+&quot;/oups&quot;);
Thread.sleep(2000);
// **************************************


WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
